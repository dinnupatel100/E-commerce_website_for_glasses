c
#subject
subject
c
subject
c
user
c
user
c
user_params
c
user_params
c
@user
if @user
@user
c
@user.update(user_params)
@user.update
c
@user
c
n
c
exit
c
JWT.decode(token, Rails.application.credentials.secret_key_base)
token
n
c
n
exit
JWT.decode(token, Rails.application.credentials.secret_key_base)
token
n
exit
JWT.decode(t, Rails.application.credentials.secret_key_base)
t = JWT.encode(payload,Rails.application.credentials.secret_key_base)
JWT.encode(payload,Rails.application.credentials.secret_key_base)
payload
c
exit
JWT.decode("eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxOTl9.3L9yHAVvlZ_9xM2PIUdr-DBnDxP44cyCPFrZcSP0zsw", Rails.application.credentials.secret_key_base)
JWT.decode(eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxOTl9.3L9yHAVvlZ_9xM2PIUdr-DBnDxP44cyCPFrZcSP0zsw, Rails.application.credentials.secret_key_base)
JWT.decode(t, Rails.application.credentials.secret_key_base)
t = JWT.encode({user_id: 199}, Rails.application.secrets.secret_key_base)
JWT.encode({user_id: 199}, Rails.application.secrets.secret_key_base)
User.find(199)
Rails.application.credentials.secret_key_base
JWT.decode(token, Rails.application.credentials.secret_key_base)
n
c
User.find(199)
user.id
exit
JWT.decode(token, Rails.application.credentials.secret_key_base)
token
n
request.headers['authorization']
exit
decode_token
c
response.body
c
@user.role
@user.abilities
@user.can_access
exit
@user.admin?
@user
user
response.body
response
c
request.headers['Authorization']
c
@user
c
subject.product_name
subject
c
subject.valid?
subject
c
subject.valid?
subject
c
subject
c
subject
c
@product_size
c
@product_size
c
@category
c
@category
c
@category
c
@category
category
@category
c
params[:keywords]
c
user
c
Category.all
      byebug
c
user
c
user_id
c
user_id
c
user_id
user
c
@user.update(user_params)
user_params
u = @user.update(first_name: "lallala" )
@user.update!
@user
c
current_user.id
o_id
c
if record ;puts "true"; end
record
if record puts "true" end
if record
record
c
n
next
params
c
continue
params
